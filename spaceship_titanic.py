# -*- coding: utf-8 -*-
"""Spaceship_Titanic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EPZIL85sMWl3NmABtobpbyCqkkNfoIlF
"""

# Carregar os dados
train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')
sample_submission = pd.read_csv('sample_submission.csv')

# Visualizar as primeiras linhas
print("Dados de Treino:")
print(train.head())
print("\nInformações do Conjunto de Treino:")
print(train.info())

# Importar a biblioteca pandas
import pandas as pd

# Carregar os dados
train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')
sample_submission = pd.read_csv('sample_submission.csv')

# Visualizar as primeiras linhas
print("Dados de Treino:")
print(train.head())
print("\nInformações do Conjunto de Treino:")
print(train.info())

import seaborn as sns
import matplotlib.pyplot as plt

# Distribuição da variável alvo
print(train['Transported'].value_counts(normalize=True))
sns.countplot(x='Transported', data=train)
plt.title('Distribuição de Transported')
plt.show()

# Distribuição de uma variável numérica (Age)
sns.histplot(data=train, x='Age', hue='Transported', bins=30)
plt.title('Distribuição de Idade por Transported')
plt.show()

# Relação de uma variável categórica (HomePlanet)
sns.countplot(x='HomePlanet', hue='Transported', data=train)
plt.title('HomePlanet vs Transported')
plt.show()

# Verificar valores ausentes
print("\nValores Ausentes:")
print(train.isnull().sum())

import pandas as pd

# Carregar os dados
train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')
sample_submission = pd.read_csv('sample_submission.csv')

# Visualizar as primeiras 5 linhas do treino
print("Dados de Treino:")
print(train.head())

# Informações gerais
print("\nInformações do Dataset:")
print(train.info())

# Tamanho dos dados
print("Shape do treino:", train.shape)
print("Shape do teste:", test.shape)

# Valores ausentes
print("\nValores ausentes no treino:")
print(train.isnull().sum())

# Distribuição de Transported
print("\nDistribuição de Transported:")
print(train['Transported'].value_counts(normalize=True))

# Estatísticas descritivas
print("\nEstatísticas descritivas:")
print(train.describe())

import seaborn as sns
import matplotlib.pyplot as plt

# Distribuição de Transported
plt.figure(figsize=(6, 4))
sns.countplot(x='Transported', data=train)
plt.title('Distribuição de Transported')
plt.show()

# Idade vs Transported
plt.figure(figsize=(8, 5))
sns.histplot(data=train, x='Age', hue='Transported', bins=30)
plt.title('Distribuição de Idade por Transported')
plt.show()

def fill_missing_values(df):
    # Numéricos: preencher com mediana
    numeric_cols = ['Age', 'RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']
    for col in numeric_cols:
        df[col] = df[col].fillna(df[col].median())

    # Categóricos: preencher com moda
    categorical_cols = ['HomePlanet', 'CryoSleep', 'Destination', 'VIP']
    for col in categorical_cols:
        df[col] = df[col].fillna(df[col].mode()[0])

    # Cabin e Name
    df['Cabin'] = df['Cabin'].fillna('Unknown')
    df['Name'] = df['Name'].fillna('Unknown')

    return df

# Aplicar aos dados
train = fill_missing_values(train.copy())
test = fill_missing_values(test.copy())

# Verificar valores ausentes
print("Valores ausentes após tratamento (treino):")
print(train.isnull().sum())
print("\nValores ausentes após tratamento (teste):")
print(test.isnull().sum())

def engineer_features(df):
    # Extrair Deck e Side de Cabin
    df['Deck'] = df['Cabin'].apply(lambda x: x.split('/')[0] if x != 'Unknown' else 'Unknown')
    df['Side'] = df['Cabin'].apply(lambda x: x.split('/')[-1] if x != 'Unknown' else 'Unknown')

    # Gastos totais
    df['TotalSpend'] = df[['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']].sum(axis=1)

    # Grupo de PassengerId
    df['Group'] = df['PassengerId'].apply(lambda x: x.split('_')[0])

    return df

train = engineer_features(train)
test = engineer_features(test)

# Verificar novas colunas
print("Colunas após engenharia de features:")
print(train.columns)

from sklearn.preprocessing import LabelEncoder

# One-Hot Encoding
categorical_cols = ['HomePlanet', 'Destination', 'Deck', 'Side']
train = pd.get_dummies(train, columns=categorical_cols, dummy_na=False)
test = pd.get_dummies(test, columns=categorical_cols, dummy_na=False)

# Alinhar colunas entre treino e teste
train, test = train.align(test, join='left', axis=1, fill_value=0)

# Label Encoding para binários
le = LabelEncoder()
for col in ['CryoSleep', 'VIP']:
    train[col] = le.fit_transform(train[col])
    test[col] = le.transform(test[col])

# Verificar colunas
print("Colunas após codificação:")
print(train.columns)

drop_cols = ['PassengerId', 'Cabin', 'Name', 'Group']
train = train.drop(columns=drop_cols)
test_ids = test['PassengerId']  # Guardar para submissão
test = test.drop(columns=drop_cols)

# Verificar
print("Colunas finais no treino:")
print(train.columns)

from sklearn.model_selection import train_test_split

X = train.drop('Transported', axis=1)
y = train['Transported']
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Treinar o modelo
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Avaliar
y_pred = rf.predict(X_val)
print("Acurácia no conjunto de validação:", accuracy_score(y_val, y_pred))

def fill_missing_values(df):
    # Numéricos: preencher com mediana
    numeric_cols = ['Age', 'RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']
    for col in numeric_cols:
        df[col] = df[col].fillna(df[col].median())

    # Categóricos: preencher com moda
    categorical_cols = ['HomePlanet', 'CryoSleep', 'Destination', 'VIP']
    for col in categorical_cols:
        df[col] = df[col].fillna(df[col].mode()[0])

    # Cabin e Name
    df['Cabin'] = df['Cabin'].fillna('Unknown')
    df['Name'] = df['Name'].fillna('Unknown')

    return df

# Carregar os dados novamente (caso tenha modificado algo)
import pandas as pd
train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

# Aplicar a função
train = fill_missing_values(train.copy())
test = fill_missing_values(test.copy())

# Verificar valores ausentes
print("Valores ausentes após tratamento (treino):")
print(train.isnull().sum())
print("\nValores ausentes após tratamento (teste):")
print(test.isnull().sum())

def engineer_features(df):
    # Extrair Deck e Side de Cabin
    df['Deck'] = df['Cabin'].apply(lambda x: x.split('/')[0] if x != 'Unknown' else 'Unknown')
    df['Side'] = df['Cabin'].apply(lambda x: x.split('/')[-1] if x != 'Unknown' else 'Unknown')

    # Gastos totais
    df['TotalSpend'] = df[['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']].sum(axis=1)

    # Grupo de PassengerId
    df['Group'] = df['PassengerId'].apply(lambda x: x.split('_')[0])

    return df

train = engineer_features(train)
test = engineer_features(test)

# Verificar novas colunas
print("Colunas após engenharia de features:")
print(train.columns)

from sklearn.preprocessing import LabelEncoder

# One-Hot Encoding
categorical_cols = ['HomePlanet', 'Destination', 'Deck', 'Side']
train = pd.get_dummies(train, columns=categorical_cols, dummy_na=False)
test = pd.get_dummies(test, columns=categorical_cols, dummy_na=False)

# Alinhar colunas entre treino e teste
train, test = train.align(test, join='left', axis=1, fill_value=0)

# Label Encoding para binários
le = LabelEncoder()
for col in ['CryoSleep', 'VIP']:
    train[col] = le.fit_transform(train[col])
    test[col] = le.transform(test[col])

# Verificar colunas
print("Colunas após codificação:")
print(train.columns)

drop_cols = ['PassengerId', 'Cabin', 'Name', 'Group']
train = train.drop(columns=drop_cols)
test_ids = test['PassengerId']  # Guardar para previsões futuras
test = test.drop(columns=drop_cols)

# Verificar
print("Colunas finais no treino:")
print(train.columns)

from sklearn.model_selection import train_test_split

X = train.drop('Transported', axis=1)
y = train['Transported']
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Treinar o modelo
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Previsões no conjunto de validação
y_pred = rf.predict(X_val)

# Avaliar
print("Acurácia no conjunto de validação:", accuracy_score(y_val, y_pred))
print("\nMatriz de Confusão:")
print(confusion_matrix(y_val, y_pred))
print("\nRelatório de Classificação:")
print(classification_report(y_val, y_pred))

import xgboost as xgb

# Treinar o modelo
xgb_model = xgb.XGBClassifier(random_state=42, eval_metric='logloss')
xgb_model.fit(X_train, y_train)

# Previsões
y_pred_xgb = xgb_model.predict(X_val)

# Avaliar
print("Acurácia do XGBoost:", accuracy_score(y_val, y_pred_xgb))
print("\nMatriz de Confusão (XGBoost):")
print(confusion_matrix(y_val, y_pred_xgb))
print("\nRelatório de Classificação (XGBoost):")
print(classification_report(y_val, y_pred_xgb))

def predict_passenger(model, passenger_data, feature_columns):
    # Converter dados do passageiro em DataFrame
    passenger_df = pd.DataFrame([passenger_data])

    # Aplicar o mesmo pré-processamento
    passenger_df = fill_missing_values(passenger_df)
    passenger_df = engineer_features(passenger_df)
    passenger_df = pd.get_dummies(passenger_df, columns=['HomePlanet', 'Destination', 'Deck', 'Side'], dummy_na=False)
    passenger_df, _ = passenger_df.align(X_train, join='right', axis=1, fill_value=0)
    for col in ['CryoSleep', 'VIP']:
        passenger_df[col] = le.fit_transform(passenger_df[col])
    passenger_df = passenger_df.drop(columns=['PassengerId', 'Cabin', 'Name', 'Group'], errors='ignore')

    # Fazer previsão
    prediction = model.predict(passenger_df)
    probability = model.predict_proba(passenger_df)[0]

    return prediction[0], probability

# Exemplo de passageiro fictício
new_passenger = {
    'PassengerId': '9999_01',
    'HomePlanet': 'Earth',
    'CryoSleep': False,
    'Cabin': 'G/1500/S',
    'Destination': 'TRAPPIST-1e',
    'Age': 30,
    'VIP': False,
    'RoomService': 100,
    'FoodCourt': 50,
    'ShoppingMall': 0,
    'Spa': 200,
    'VRDeck': 0,
    'Name': 'John Doe'
}

# Fazer previsão com o melhor modelo (ex.: XGBoost)
prediction, probability = predict_passenger(xgb_model, new_passenger, X_train.columns)
print("Previsão para o passageiro:", prediction)
print("Probabilidades [False, True]:", probability)

import matplotlib.pyplot as plt

# Importância de features (XGBoost)
feature_importance = xgb_model.feature_importances_
feature_names = X_train.columns
importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': feature_importance})
importance_df = importance_df.sort_values(by='Importance', ascending=False)

# Plotar
plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=importance_df.head(10))
plt.title('Top 10 Features Mais Importantes (XGBoost)')
plt.show()

from sklearn.model_selection import cross_val_score

# Validação cruzada com XGBoost
scores = cross_val_score(xgb_model, X, y, cv=5, scoring='accuracy')
print("Acurácia média na validação cruzada:", scores.mean())
print("Desvio padrão:", scores.std())

import joblib

# Salvar o modelo
joblib.dump(xgb_model, 'spaceship_titanic_model.pkl')
print("Modelo salvo como spaceship_titanic_model.pkl")

from sklearn.model_selection import GridSearchCV

# Definir parâmetros para testar
param_grid = {
    'n_estimators': [100, 200],
    'max_depth': [3, 5, 7],
    'learning_rate': [0.01, 0.1]
}

# Configurar GridSearch
grid_search = GridSearchCV(
    xgb.XGBClassifier(random_state=42, eval_metric='logloss'),
    param_grid,
    cv=5,
    scoring='accuracy',
    n_jobs=-1
)

# Treinar
grid_search.fit(X_train, y_train)

# Resultados
print("Melhores parâmetros:", grid_search.best_params_)
print("Melhor acurácia:", grid_search.best_score_)

# Atualizar o modelo
best_model = grid_search.best_estimator_
y_pred_best = best_model.predict(X_val)
print("Acurácia no conjunto de validação (após ajuste):", accuracy_score(y_val, y_pred_best))

# Tamanho do grupo
train['GroupSize'] = train.groupby('Group')['Group'].transform('count')
test['GroupSize'] = test.groupby('Group')['Group'].transform('count')

# Indicador de passageiro sozinho
train['IsAlone'] = (train['GroupSize'] == 1).astype(int)
test['IsAlone'] = (test['GroupSize'] == 1).astype(int)

# Verificar
print("Primeiras linhas com novas features:")
print(train[['Group', 'GroupSize', 'IsAlone']].head())

drop_cols = ['PassengerId', 'Cabin', 'Name', 'Group']
train = train.drop(columns=drop_cols)

# The columns were already dropped in a previous cell.
# Removing this redundant drop command.
# drop_cols = ['PassengerId', 'Cabin', 'Name', 'Group']
# train = train.drop(columns=drop_cols)

def engineer_features(df):
    # Extrair Deck e Side de Cabin
    df['Deck'] = df['Cabin'].apply(lambda x: x.split('/')[0] if x != 'Unknown' else 'Unknown')
    df['Side'] = df['Cabin'].apply(lambda x: x.split('/')[-1] if x != 'Unknown' else 'Unknown')

    # Gastos totais
    df['TotalSpend'] = df[['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']].sum(axis=1)

    # Grupo de PassengerId
    df['Group'] = df['PassengerId'].apply(lambda x: x.split('_')[0])

    # Novas features: GroupSize e IsAlone
    df['GroupSize'] = df.groupby('Group')['Group'].transform('count')
    df['IsAlone'] = (df['GroupSize'] == 1).astype(int)

    return df

# Re-carregar os dados para garantir consistência
import pandas as pd
train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

# Reaplicar tratamento de valores ausentes (Passo 4.1)
def fill_missing_values(df):
    numeric_cols = ['Age', 'RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']
    for col in numeric_cols:
        df[col] = df[col].fillna(df[col].median())
    categorical_cols = ['HomePlanet', 'CryoSleep', 'Destination', 'VIP']
    for col in categorical_cols:
        df[col] = df[col].fillna(df[col].mode()[0])
    df['Cabin'] = df['Cabin'].fillna('Unknown')
    df['Name'] = df['Name'].fillna('Unknown')
    return df

train = fill_missing_values(train.copy())
test = fill_missing_values(test.copy())

# Aplicar engenharia de features
train = engineer_features(train)
test = engineer_features(test)

# Verificar novas colunas
print("Colunas após engenharia de features:")
print(train.columns)
print("\nPrimeiras linhas com GroupSize e IsAlone:")
print(train[['Group', 'GroupSize', 'IsAlone']].head())

from sklearn.preprocessing import LabelEncoder

# One-Hot Encoding
categorical_cols = ['HomePlanet', 'Destination', 'Deck', 'Side']
train = pd.get_dummies(train, columns=categorical_cols, dummy_na=False)
test = pd.get_dummies(test, columns=categorical_cols, dummy_na=False)

# Alinhar colunas entre treino e teste
train, test = train.align(test, join='left', axis=1, fill_value=0)

# Label Encoding para binários
le = LabelEncoder()
for col in ['CryoSleep', 'VIP']:
    train[col] = le.fit_transform(train[col])
    test[col] = le.transform(test[col])

# Verificar colunas
print("Colunas após codificação:")
print(train.columns)

drop_cols = ['PassengerId', 'Cabin', 'Name', 'Group']
train = train.drop(columns=drop_cols)
test_ids = test['PassengerId']  # Guardar para previsões futuras
test = test.drop(columns=drop_cols)

# Verificar
print("Colunas finais no treino:")
print(train.columns)

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

X = train.drop('Transported', axis=1)
y = train['Transported']
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Treinar
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Avaliar
y_pred = rf.predict(X_val)
print("Acurácia no conjunto de validação (Random Forest):", accuracy_score(y_val, y_pred))
print("\nMatriz de Confusão:")
print(confusion_matrix(y_val, y_pred))
print("\nRelatório de Classificação:")
print(classification_report(y_val, y_pred))

import xgboost as xgb

# Treinar
xgb_model = xgb.XGBClassifier(random_state=42, eval_metric='logloss')
xgb_model.fit(X_train, y_train)

# Avaliar
y_pred_xgb = xgb_model.predict(X_val)
print("Acurácia do XGBoost:", accuracy_score(y_val, y_pred_xgb))
print("\nMatriz de Confusão (XGBoost):")
print(confusion_matrix(y_val, y_pred_xgb))
print("\nRelatório de Classificação (XGBoost):")
print(classification_report(y_val, y_pred_xgb))

def predict_passenger(model, passenger_data, feature_columns):
    passenger_df = pd.DataFrame([passenger_data])
    passenger_df = fill_missing_values(passenger_df)
    passenger_df = engineer_features(passenger_df)
    passenger_df = pd.get_dummies(passenger_df, columns=['HomePlanet', 'Destination', 'Deck', 'Side'], dummy_na=False)
    passenger_df, _ = passenger_df.align(X_train, join='right', axis=1, fill_value=0)
    for col in ['CryoSleep', 'VIP']:
        passenger_df[col] = le.fit_transform(passenger_df[col])
    passenger_df = passenger_df.drop(columns=['PassengerId', 'Cabin', 'Name', 'Group'], errors='ignore')

    prediction = model.predict(passenger_df)
    probability = model.predict_proba(passenger_df)[0]

    return prediction[0], probability

# Teste com passageiro fictício
new_passenger = {
    'PassengerId': '9999_01',
    'HomePlanet': 'Earth',
    'CryoSleep': False,
    'Cabin': 'G/1500/S',
    'Destination': 'TRAPPIST-1e',
    'Age': 30,
    'VIP': False,
    'RoomService': 100,
    'FoodCourt': 50,
    'ShoppingMall': 0,
    'Spa': 200,
    'VRDeck': 0,
    'Name': 'John Doe'
}

prediction, probability = predict_passenger(xgb_model, new_passenger, X_train.columns)
print("Previsão para o passageiro:", prediction)
print("Probabilidades [False, True]:", probability)

import matplotlib.pyplot as plt
import seaborn as sns

feature_importance = xgb_model.feature_importances_
feature_names = X_train.columns
importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': feature_importance})
importance_df = importance_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=importance_df.head(10))
plt.title('Top 10 Features Mais Importantes (XGBoost)')
plt.show()

from sklearn.model_selection import cross_val_score

scores = cross_val_score(xgb_model, X, y, cv=5, scoring='accuracy')
print("Acurácia média na validação cruzada:", scores.mean())
print("Desvio padrão:", scores.std())

import joblib

joblib.dump(xgb_model, 'spaceship_titanic_model.pkl')
print("Modelo salvo como spaceship_titanic_model.pkl")

# Re-carregar os dados para consistência
import pandas as pd
train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

# Reaplicar tratamento de valores ausentes (Passo 4.1)
def fill_missing_values(df):
    numeric_cols = ['Age', 'RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']
    for col in numeric_cols:
        df[col] = df[col].fillna(df[col].median())
    categorical_cols = ['HomePlanet', 'CryoSleep', 'Destination', 'VIP']
    for col in categorical_cols:
        df[col] = df[col].fillna(df[col].mode()[0])
    df['Cabin'] = df['Cabin'].fillna('Unknown')
    df['Name'] = df['Name'].fillna('Unknown')
    return df

train = fill_missing_values(train.copy())
test = fill_missing_values(test.copy())

# Engenharia de features com GroupSize e IsAlone
def engineer_features(df):
    # Extrair Deck e Side de Cabin
    df['Deck'] = df['Cabin'].apply(lambda x: x.split('/')[0] if x != 'Unknown' else 'Unknown')
    df['Side'] = df['Cabin'].apply(lambda x: x.split('/')[-1] if x != 'Unknown' else 'Unknown')

    # Gastos totais
    df['TotalSpend'] = df[['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']].sum(axis=1)

    # Grupo de PassengerId
    df['Group'] = df['PassengerId'].apply(lambda x: x.split('_')[0])

    # Novas features: GroupSize e IsAlone
    df['GroupSize'] = df.groupby('Group')['Group'].transform('count')
    df['IsAlone'] = (df['GroupSize'] == 1).astype(int)

    return df

train = engineer_features(train)
test = engineer_features(test)

# Verificar novas colunas
print("Colunas após engenharia de features:")
print(train.columns)
print("\nPrimeiras linhas com Group, GroupSize e IsAlone:")
print(train[['Group', 'GroupSize', 'IsAlone']].head())

from sklearn.preprocessing import LabelEncoder

# One-Hot Encoding
categorical_cols = ['HomePlanet', 'Destination', 'Deck', 'Side']
train = pd.get_dummies(train, columns=categorical_cols, dummy_na=False)
test = pd.get_dummies(test, columns=categorical_cols, dummy_na=False)

# Alinhar colunas
train, test = train.align(test, join='left', axis=1, fill_value=0)

# Label Encoding
le = LabelEncoder()
for col in ['CryoSleep', 'VIP']:
    train[col] = le.fit_transform(train[col])
    test[col] = le.transform(test[col])

print("Colunas após codificação:")
print(train.columns)

drop_cols = ['PassengerId', 'Cabin', 'Name', 'Group']
train = train.drop(columns=drop_cols)
test_ids = test['PassengerId']
test = test.drop(columns=drop_cols)

print("Colunas finais no treino:")
print(train.columns)

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

X = train.drop('Transported', axis=1)
y = train['Transported']
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

y_pred = rf.predict(X_val)
print("Acurácia no conjunto de validação (Random Forest):", accuracy_score(y_val, y_pred))
print("\nMatriz de Confusão:")
print(confusion_matrix(y_val, y_pred))
print("\nRelatório de Classificação:")
print(classification_report(y_val, y_pred))

import xgboost as xgb

xgb_model = xgb.XGBClassifier(random_state=42, eval_metric='logloss')
xgb_model.fit(X_train, y_train)

y_pred_xgb = xgb_model.predict(X_val)
print("Acurácia do XGBoost:", accuracy_score(y_val, y_pred_xgb))
print("\nMatriz de Confusão (XGBoost):")
print(confusion_matrix(y_val, y_pred_xgb))
print("\nRelatório de Classificação (XGBoost):")
print(classification_report(y_val, y_pred_xgb))

def predict_passenger(model, passenger_data, feature_columns):
    passenger_df = pd.DataFrame([passenger_data])
    passenger_df = fill_missing_values(passenger_df)
    passenger_df = engineer_features(passenger_df)
    passenger_df = pd.get_dummies(passenger_df, columns=['HomePlanet', 'Destination', 'Deck', 'Side'], dummy_na=False)
    passenger_df, _ = passenger_df.align(X_train, join='right', axis=1, fill_value=0)
    for col in ['CryoSleep', 'VIP']:
        passenger_df[col] = le.fit_transform(passenger_df[col])
    passenger_df = passenger_df.drop(columns=['PassengerId', 'Cabin', 'Name', 'Group'], errors='ignore')

    prediction = model.predict(passenger_df)
    probability = model.predict_proba(passenger_df)[0]

    return prediction[0], probability

# Novo passageiro fictício
new_passenger = {
    'PassengerId': '9999_01',
    'HomePlanet': 'Earth',
    'CryoSleep': True,  # Mudança para testar
    'Cabin': 'G/1500/S',
    'Destination': 'TRAPPIST-1e',
    'Age': 18,  # Mudança para testar
    'VIP': False,
    'RoomService': 0,  # Mudança para testar
    'FoodCourt': 0,
    'ShoppingMall': 0,
    'Spa': 0,
    'VRDeck': 0,
    'Name': 'Cloud'
}

prediction, probability = predict_passenger(xgb_model, new_passenger, X_train.columns)
print("Previsão para o passageiro:", prediction)
print("Probabilidades [False, True]:", probability)

import matplotlib.pyplot as plt
import seaborn as sns

feature_importance = xgb_model.feature_importances_
feature_names = X_train.columns
importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': feature_importance})
importance_df = importance_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=importance_df.head(10))
plt.title('Top 10 Features Mais Importantes (XGBoost)')
plt.show()

from sklearn.model_selection import cross_val_score

scores = cross_val_score(xgb_model, X, y, cv=5, scoring='accuracy')
print("Acurácia média na validação cruzada:", scores.mean())
print("Desvio padrão:", scores.std())

import joblib

joblib.dump(xgb_model, 'spaceship_titanic_model_v2.pkl')
print("Modelo salvo como spaceship_titanic_model_v2.pkl")

from sklearn.model_selection import GridSearchCV
param_grid = {
    'n_estimators': [100, 200],
    'max_depth': [3, 5, 7],
    'learning_rate': [0.01, 0.1]
}
grid_search = GridSearchCV(xgb.XGBClassifier(random_state=42, eval_metric='logloss'), param_grid, cv=5, scoring='accuracy', n_jobs=-1)
grid_search.fit(X_train, y_train)
print("Melhores parâmetros:", grid_search.best_params_)
print("Melhor acurácia:", grid_search.best_score_)
best_model = grid_search.best_estimator_
y_pred_best = best_model.predict(X_val)
print("Acurácia no conjunto de validação (após ajuste):", accuracy_score(y_val, y_pred_best))

errors = X_val[y_pred_xgb != y_val].copy()
errors['True'] = y_val[y_pred_xgb != y_val]
errors['Predicted'] = y_pred_xgb[y_pred_xgb != y_val]
print("Exemplos de previsões erradas:")
print(errors.head())
plt.figure(figsize=(8, 5))
sns.histplot(data=errors, x='Age', hue='True', bins=30)
plt.title('Distribuição de Idade nos Erros')
plt.show()